library(plotly)
library(readxl)
library(markovchain)
library(fitdistrplus)
library(expm)
library(rriskDistributions)
library(igraph)



#Función que transforma un número decimal a binario
number2binary = function(number, noBits) {
  binary_vector = rev(as.numeric(intToBits(number)))
  if(missing(noBits)) {
    return(binary_vector)
  } else {
    binary_vector[-(1:(length(binary_vector) - noBits))]
  }
}


Crear_cadena_markov<-function(datos,taza1,taza2){
  #Parámetros del modelo
  tazaContagio=taza1
  tazaRecuperacion=taza2
  MAT=as.matrix(datos)

  numFilas=length(MAT[1,])
  filas_col=c(1:numFilas)
  MatrizAdyacencia=MAT
  
  #MatrizAdyacencia[2,1]=1
  #MatrizAdyacencia[2,3]=1
  #MatrizAdyacencia[3,1]=1
  #MatrizAdyacencia[3,2]=1
  
  #MatrizAdyacencia[1,2]=1
  #MatrizAdyacencia[1,3]=1
  
  
  #Se crea un grafo para visualizar la matriz
  
  
  #plot(grafo)
  
  #Se crean los estados de la cadena de markov y la matriz de adjacencia
  estadosCadenaMarkov=c(1:2^numFilas)
  MatrizCadenaMarkov=matrix(0, nrow = 2^numFilas, ncol = 2^numFilas)
  MatrizCadenaMarkov2=matrix(0, nrow = 2^numFilas, ncol = 2^numFilas)
  
  
  
  rownames=c()
  
  numerosCadenaMarkov=c(1:2^numFilas)
  
  
  for (i in numerosCadenaMarkov) { 
    
    binario=number2binary(i-1,numFilas)
    
    rownames=c(rownames,paste(binario,collapse=" "))
    
  }
  
  
  
  colnames(MatrizCadenaMarkov)=rownames
  rownames(MatrizCadenaMarkov)=rownames
  
  colnames(MatrizCadenaMarkov2)=rownames
  rownames(MatrizCadenaMarkov2)=rownames
  
  valoresEsperados=c(1:2^numFilas)
  
  #Se llena la matriz de transición de la cadena de Markov
  for (i in estadosCadenaMarkov) { 
    
    arrbin1=number2binary(i-1,numFilas)
    valEspTemp=0
    for(k in arrbin1){
      valEspTemp=valEspTemp+k;
    }
    valoresEsperados[i]=valEspTemp
    for (j in estadosCadenaMarkov) { 
      arrbin2=number2binary(j-1,numFilas)
      numNoRepetidos=0
      cont=1
     
      for(k in arrbin2){
        valEspTemp=valEspTemp+1;
        if(arrbin1[cont]!=arrbin2[cont]){
          numNoRepetidos=numNoRepetidos+1;
        }
        cont=cont+1
      }
      
      if(numNoRepetidos==1){
        cont=1
        for(k in arrbin2){
          if(arrbin1[cont]>arrbin2[cont]){
            MatrizCadenaMarkov[i,j]=tazaRecuperacion
          }
          if(arrbin1[cont]<arrbin2[cont]){
            sumaMatrizAdy=0
            cont2=1
            for (temp in MatrizAdyacencia[,cont]) {
              sumaMatrizAdy=sumaMatrizAdy+(temp*as.numeric(arrbin1[cont2]));
              cont2=cont2+1;
              
            }
            MatrizCadenaMarkov[i,j]=tazaContagio*sumaMatrizAdy;
          }
          cont=cont+1;
        }
      }
      
    }
  }
  
  
  #Se crea un grafo para visualizar la cadena de Markov
  #grafo2=graph_from_adjacency_matrix(
  #  MatrizCadenaMarkov,
  #  mode = c("directed"),
  #  weighted=TRUE
  #)
  
  #plot(grafo2)
  
  #plot(grafo2,edge.label=round(E(grafo2)$weight, 3))
  
  
  
  
  #Se llena la diagonal de la matriz de transición
  for (i in estadosCadenaMarkov) {
    suma=sum(MatrizCadenaMarkov[i,])
    MatrizCadenaMarkov[i,i]=(-1)*suma
  }
  print(MatrizCadenaMarkov)
  matrizDiscreta=generatorToTransitionMatrix(MatrizCadenaMarkov, byrow = TRUE)
  
  
  
  for (i in estadosCadenaMarkov) {
    matrizDiscreta[1,i]=0
  }
  matrizDiscreta[1,1]=1
  
  
  
  #Se crea la cadena de Markov con los estados y la matriz de transición
  CMTC<-new(Class="ctmc", states = as.character(rownames), generator = MatrizCadenaMarkov)
  

  
  #Se grafica la cadena de Markov
  #plot(CMTC, edge.arrow.size=0.5)
  
     cosas<-list(0,0,0,0)
     cosas[[1]]=MatrizCadenaMarkov
     cosas[[2]]=estadosCadenaMarkov
     cosas[[3]]=CMTC
     cosas[[4]]=matrizDiscreta
     cosas[[5]]=numFilas
     cosas[[6]]=valoresEsperados
     return (cosas)
}


tiempoEsperado<-function(cadena){
  estadosCadenaMarkov<-cadena[[2]]
  CMTC<-cadena[[3]]
  tiempoEsperado2<-c()
  estadosCadenaMarkov2<-c()
  #Se muestra el tiempo esperado antes de llegar a 0 infectados empezando en cada uno de los estados.

  for (i in estadosCadenaMarkov) {

    Tam<-2^(i-1)+1
    if(Tam<length(estadosCadenaMarkov)){
      
      tiempoEsperado2 <- c(tiempoEsperado2, ExpectedTime(CMTC,Tam,1,TRUE))
      estadosCadenaMarkov2<-c(estadosCadenaMarkov2,log2(length(estadosCadenaMarkov))-i+1)
    }
    
  }
    probEst<- tiempoEsperado2
    estados2<-estadosCadenaMarkov2
     cosas<-list(0,0,0)
     cosas[[1]]=data.frame(estados2,probEst)
     cosas[[2]]=estadosCadenaMarkov2
     cosas[[3]]=probEst
    return(cosas)
}

serieDeTiempo<-function(cadena,valor){
  estadosCadenaMarkov<-cadena[[2]]
  matrizDiscreta<-cadena[[4]]
  numFilas<-cadena[[5]]
  valoresEsperados<-cadena[[6]]
  valoresTiempo<-valor
  arrdef <- matrix(0, nrow = numFilas, ncol = valoresTiempo) 
  for (i in estadosCadenaMarkov) {

    Tam<-2^(i-1)+1
    if(Tam<length(estadosCadenaMarkov)){
      vecinicial<-rep(0, 2^numFilas)
      vecinicial[Tam]=1;
      valorEsperado=0;
      for(j in c(1:valoresTiempo)){
        probabilidadesEnNpasos=vecinicial%*%(matrizDiscreta%^%j)
        arrdef[log2(length(estadosCadenaMarkov))-i+1,j]=sum(probabilidadesEnNpasos*valoresEsperados);
      }
    }
    
  }
  vec0<-matrix(1, nrow = numFilas, ncol = 1)
  resp<-cbind(vec0,arrdef)
  return(resp)
  
}

serieDeTiempo2<-function(cadena,numEtapas){
  estadosCadenaMarkov<-cadena[[2]]
  matrizDiscreta<-cadena[[4]]
  numFilas<-cadena[[5]]
  valoresEsperados<-cadena[[6]]
  valoresTiempo<-numEtapas
  arrdef <- matrix(0, nrow = numFilas, ncol = valoresTiempo) 
  for (i in estadosCadenaMarkov) {
    
    Tam<-2^(i-1)+1
    if(Tam<length(estadosCadenaMarkov)){
      vecinicial<-rep(0, 2^numFilas)
      vecinicial[Tam]=1;
      valorEsperado=0;
      for(j in c(1:valoresTiempo)){
        probabilidadesEnNpasos=vecinicial%*%(matrizDiscreta%^%j)
        arrdef[log2(length(estadosCadenaMarkov))-i+1,j]=sum(probabilidadesEnNpasos*valoresEsperados);
      }
    }
    
  }

  return(arrdef)
  
}

testTstudent<-function(datosSimulacion,tazaContagio,tazaRecuperacion,matrizAdyacencia,numEtapas){
  
  datosSimulacion<-t(as.matrix(datosSimulacion))
  mapaCalor<-length(datosSimulacion[,1])*datosSimulacion
  taza1<-tazaContagio
  taza2<-tazaRecuperacion
  cadena<-Crear_cadena_markov(matrizAdyacencia,taza1,taza2)
  print("crea la cadena")
  graf<-serieDeTiempo2(cadena,numEtapas)
  print("serie de tiempo")
  vec1<-c(graf)
  vec2<-c(mapaCalor)
  respuesta=""
  r<-t.test(vec1,vec2)
  return(r$p.value)

}




