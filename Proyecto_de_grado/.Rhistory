arrbin2=number2binary(j-1,numFilas)
numNoRepetidos=0
cont=1
for(k in arrbin2){
if(arrbin1[cont]!=arrbin2[cont]){
numNoRepetidos=numNoRepetidos+1;
}
cont=cont+1
}
if(numNoRepetidos==1){
cont=1
for(k in arrbin2){
if(arrbin1[cont]>arrbin2[cont]){
MatrizCadenaMarkov[i,j]=tazaRecuperacion
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaRecuperacion)
}
if(arrbin1[cont]<arrbin2[cont]){
sumaMatrizAdy=0
cont2=1
for (temp in MatrizAdyacencia[,cont]) {
sumaMatrizAdy=sumaMatrizAdy+(temp*as.numeric(arrbin1[cont2]));
cont2=cont2+1;
}
MatrizCadenaMarkov[i,j]=tazaContagio*sumaMatrizAdy;
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaContagio*sumaMatrizAdy)
}
cont=cont+1;
}
}
}
}
print(MatrizCadenaDiscreta)
print(MatrizCadenaDiscreta)
#Se llena la matriz de transici贸n de la cadena de Markov
for (i in estadosCadenaMarkov) {
arrbin1=number2binary(i-1,numFilas)
for (j in estadosCadenaMarkov) {
arrbin2=number2binary(j-1,numFilas)
numNoRepetidos=0
cont=1
for(k in arrbin2){
if(arrbin1[cont]!=arrbin2[cont]){
numNoRepetidos=numNoRepetidos+1;
}
cont=cont+1
}
if(numNoRepetidos==1){
cont=1
for(k in arrbin2){
if(arrbin1[cont]>arrbin2[cont]){
MatrizCadenaMarkov[i,j]=tazaRecuperacion
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaRecuperacion)
}
if(arrbin1[cont]<arrbin2[cont]){
sumaMatrizAdy=0
cont2=1
for (temp in MatrizAdyacencia[,cont]) {
sumaMatrizAdy=sumaMatrizAdy+(temp*as.numeric(arrbin1[cont2]));
cont2=cont2+1;
}
MatrizCadenaMarkov[i,j]=tazaContagio*sumaMatrizAdy;
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaContagio*sumaMatrizAdy)
}
cont=cont+1;
}
}
}
}
print(MatrizCadenaDiscreta)
tazaRecuperacion=1
tazaContagio=1
#Se llena la matriz de transici贸n de la cadena de Markov
for (i in estadosCadenaMarkov) {
arrbin1=number2binary(i-1,numFilas)
for (j in estadosCadenaMarkov) {
arrbin2=number2binary(j-1,numFilas)
numNoRepetidos=0
cont=1
for(k in arrbin2){
if(arrbin1[cont]!=arrbin2[cont]){
numNoRepetidos=numNoRepetidos+1;
}
cont=cont+1
}
if(numNoRepetidos==1){
cont=1
for(k in arrbin2){
if(arrbin1[cont]>arrbin2[cont]){
MatrizCadenaMarkov[i,j]=tazaRecuperacion
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaRecuperacion)
}
if(arrbin1[cont]<arrbin2[cont]){
sumaMatrizAdy=0
cont2=1
for (temp in MatrizAdyacencia[,cont]) {
sumaMatrizAdy=sumaMatrizAdy+(temp*as.numeric(arrbin1[cont2]));
cont2=cont2+1;
}
MatrizCadenaMarkov[i,j]=tazaContagio*sumaMatrizAdy;
MatrizCadenaDiscreta[i,j]=pexp(1, rate=tazaContagio*sumaMatrizAdy)
}
cont=cont+1;
}
}
}
}
print(MatrizCadenaDiscreta)
print(pexp(1, rate=tazaContagio*sumaMatrizAdy))
print(pexp(tazaContagio*sumaMatrizAdy)
#Se crea un grafo para visualizar la cadena de Markov
grafo2=graph_from_adjacency_matrix(
MatrizCadenaMarkov,
mode = c("directed"),
weighted=TRUE
)
#plot(grafo2)
#plot(grafo2,edge.label=round(E(grafo2)$weight, 3))
#Se llena la diagonal de la matriz de transici贸n
for (i in estadosCadenaMarkov) {
suma=sum(MatrizCadenaMarkov[i,])
MatrizCadenaMarkov[i,i]=(-1)*suma
}
#Se crea la cadena de Markov con los estados y la matriz de transici贸n
CMTC<-new(Class="ctmc", states = as.character(rownames), generator = MatrizCadenaMarkov)
#Se grafica la cadena de Markov
#plot(CMTC, edge.arrow.size=0.5)
cosas<-list(0,0,0)
cosas[[1]]=MatrizCadenaMarkov
cosas[[2]]=estadosCadenaMarkov
cosas[[3]]=CMTC
return (cosas)
}
tiempoEsperado<-function(cadena){
estadosCadenaMarkov<-cadena[[2]]
CMTC<-cadena[[3]]
tiempoEsperado2<-c()
estadosCadenaMarkov2<-c()
#Se muestra el tiempo esperado antes de llegar a 0 infectados empezando en cada uno de los estados.
for (i in estadosCadenaMarkov) {
Tam<-2^(i-1)+1
if(Tam<length(estadosCadenaMarkov)){
tiempoEsperado2 <- c(tiempoEsperado2, ExpectedTime(CMTC,Tam,1,TRUE))
estadosCadenaMarkov2<-c(estadosCadenaMarkov2,i)
}
}
probEst<- tiempoEsperado2
estados2<-estadosCadenaMarkov2
cosas<-list(0,0,0)
cosas[[1]]=data.frame(estados2,probEst)
cosas[[2]]=estadosCadenaMarkov2
cosas[[3]]=probEst
return(cosas)
}
tiempoEsperado2<-function(cadena){
estadosCadenaMarkov<-cadena[[2]]
CMTC<-cadena[[3]]
tiempoEsperado2<-c()
estadosCadenaMarkov2<-c()
#Se muestra el tiempo esperado antes de llegar a 0 infectados empezando en cada uno de los estados.
for (i in estadosCadenaMarkov) {
Tam<-2^(i-1)+1
if(Tam<length(estadosCadenaMarkov)){
}
}
probEst<- tiempoEsperado2
estados2<-estadosCadenaMarkov2
cosas<-list(0,0,0)
cosas[[1]]=data.frame(estados2,probEst)
cosas[[2]]=estadosCadenaMarkov2
cosas[[3]]=probEst
return(cosas)
}
print(tazaContagio*sumaMatrizAdy)
print(tazaContagio)
print(pexp(1, rate=tazaContagio))
runApp()
}
runApp()
runApp()
print(MatrizCadenaMarkov)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ProbabilidadDosPasos=(estadoInicial%*%(matrizDiscreta^2))
plot(ProbabilidadDosPasos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
estadosCadenaMarkov<-cadena[[2]]
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Se muestra el tiempo esperado antes de llegar a 0 infectados empezando en cada uno de los estados.
for (i in estadosCadenaMarkov) {
#IMPORTANTE-esto no es correcto
Tam<-2^(i-1)+1
if(Tam<length(estadosCadenaMarkov)){
print(Tam)
tiempoEsperado2 <- c(tiempoEsperado2, ExpectedTime(CMTC,Tam,1,TRUE))
estadosCadenaMarkov2<-c(estadosCadenaMarkov2,i)
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pvalue<-2
source("Back.R")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
pvalue<-2
fileConn<-file("pvalue.txt")
writeLines(c(pvalue), fileConn)
close(fileConn)
writeLines(pvalue, fileConn)
pvalue<-2
fileConn<-file("pvalue.txt")
writeLines(pvalue, fileConn)
writeLines(pvalue+"", fileConn)
writeLines(paste0("El pvalue es", pvalue, ")"), fileConn)
close(fileConn)
shiny::runApp()
runApp()
runApp()
dat1=read_excel("resultadoSimulacion.xlsx")
source("Back.R")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
print(dat1)
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
print(dat1)
print(dat2)
source("Back.R")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
print(dat1)
print(dat2)
pvalue<-testTstudent(dat1,1,1,dat2)
fileConn<-file("pvalue.txt")
writeLines(paste0("El pvalue es ", pvalue, ""), fileConn)
close(fileConn)
close(fileConn)
shiny::runApp()
source("Back.R")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
print(dat1)
print(dat2)
pvalue<-testTstudent(dat1,1,1,dat2)
fileConn<-file("pvalue.txt")
writeLines(paste0("El pvalue es ", pvalue, ""), fileConn)
close(fileConn)
for(j in c(1:valoresTiempo)){
probabilidadesEnNpasos=vecinicial%*%(matrizDiscreta%^%j)
arrdef[i,j]=sum(probabilidadesEnNpasos*valoresEsperados);
}
shiny::runApp()
source("Back.R")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
print(dat1)
print(dat2)
pvalue<-testTstudent(dat1,1,1,dat2)
fileConn<-file("pvalue.txt")
writeLines(paste0("El pvalue es ", pvalue, ""), fileConn,append=TRUE)
close(fileConn)
source("Back.R")
install.packages("readr")
# Loading
library("readr")
my_file <- system.file("params.txt", package = "readr")
# Read lines
my_data <- read_lines(my_file)
print(my_data)
my_file <- system.file("params.txt", package = "readr")
# Read lines
my_data <- read_lines(my_file)
my_data<-read_delim("params.txt", delim, col_names = TRUE)
my_data<-read_delim("params.txt", "\n")
print(my_data)
source("Back.R")
source("Back.R")
my_data<-read_delim("params.txt", "\n", col_names = FALSE)
print(my_data)
my_data<-read_delim("params.txt", "\n", col_names = FALSE)
matriz<-as.matrix(my_data)
print(matriz[0])
print(matriz)
print(matriz[1])
writeLines(paste0("Los parametros son:\n "), fileConn,append=TRUE)
fileConn<-file("pvalue.txt")
write(paste0("Los parametros son:\n "), fileConn,append=TRUE)
write(paste0("Num nodos:", matriz[1],"\n"), fileConn,append=TRUE)
write(paste0("Num muestras:", matriz[2],"\n"), fileConn,append=TRUE)
write(paste0("Etapas:", matriz[2],"\n"), fileConn,append=TRUE)
write(paste0("El pvalue es ", pvalue, ""), fileConn,append=TRUE)
close(fileConn)
fileConn<-file("pvalue.txt")
write(paste0("Los parametros son:\n "), fileConn,append=TRUE)
write(paste0("Num nodos:", matriz[1],"\n"), fileConn,append=TRUE)
write(paste0("Num muestras:", matriz[2],"\n"), fileConn,append=TRUE)
write(paste0("Etapas:", matriz[2],"\n"), fileConn,append=TRUE)
write(paste0("El pvalue es ", pvalue, ""), fileConn,append=TRUE)
close(fileConn)
write(paste0("Los parametros son:\n "), file="pvalue.txt",append=TRUE)
write(paste0("Num nodos:", matriz[1],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Num muestras:", matriz[2],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Etapas:", matriz[2],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("El pvalue es ", pvalue, "\n"), file="pvalue.txt",append=TRUE)
write(paste0("--------------------------------------\n"), file="pvalue.txt",append=TRUE)
source("Back.R")
# Loading
library("readr")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
my_data<-read_delim("params.txt", "\n", col_names = FALSE)
matriz<-as.matrix(my_data)
print(dat1)
print(dat2)
pvalue<-testTstudent(dat1,1,1,dat2)
write(paste0("Los parametros son:\n "), file="pvalue.txt",append=TRUE)
write(paste0("Num nodos:", matriz[1],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Num muestras:", matriz[2],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Etapas:", matriz[2],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("El pvalue es ", pvalue, "\n"), file="pvalue.txt",append=TRUE)
write(paste0("--------------------------------------\n"), file="pvalue.txt",append=TRUE)
# Loading
library("readr")
dat1=read_excel("resultadoSimulacion.xlsx")
dat2=read_excel("coordenadas.xlsx")
my_data<-read_delim("params.txt", "\n", col_names = FALSE)
matriz<-as.matrix(my_data)
print(dat1)
print(dat2)
pvalue<-testTstudent(dat1,1,1,dat2,matriz[3])
source("Back.R")
pvalue<-testTstudent(dat1,1,1,dat2,matriz[3])
write(paste0("Los parametros son:\n "), file="pvalue.txt",append=TRUE)
write(paste0("Num nodos:", matriz[1],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Num muestras:", matriz[2],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("Etapas:", matriz[3],"\n"), file="pvalue.txt",append=TRUE)
write(paste0("El pvalue es ", pvalue, "\n"), file="pvalue.txt",append=TRUE)
write(paste0("--------------------------------------\n"), file="pvalue.txt",append=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(MatrizCadenaMarkov)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Se llena la diagonal de la matriz de transici贸n
for (i in estadosCadenaMarkov) {
suma=sum(MatrizCadenaMarkov[i,])
MatrizCadenaMarkov[i,i]=(-1)*suma
}
print(MatrizCadenaMarkov)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
estadosCadenaMarkov2<-c(estadosCadenaMarkov2,log2(length(estadosCadenaMarkov))-i)
runApp()
runApp()
runApp()
runApp()
runApp()
